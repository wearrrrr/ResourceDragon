#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Desktop CI builds (cmake)"
on:
  push:
  pull_request:
  workflow_dispatch:

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  APP_NAME: "ResourceDragon"
  APP_VERSION: "0.0.1"

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  ## GNU/Linux build ###########################################################
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-22.04
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      # set up a reasonable clang version (thanks ubuntu!)
      - name: Install Clang from llvm.sh
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

      - name: Checkout submodules
        run: git submodule update --init --recursive

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             sudo apt-get install libgl-dev libxkbcommon-x11-dev libx11-xcb-dev libzstd-dev libxcb1 libxkbcommon0 libxkbcommon-x11-0 libx11-xcb1 libwayland-client0 libwayland-cursor0 libwayland-egl1 libwayland-server0 cmake ninja-build pkgconf libtool libfuse2 appstream libasound2 libasound2-dev libpipewire-0.3-0 libpipewire-0.3-dev libaudio2 libaudio-dev -y;

      # Build application
      - name: Build application
        run: |
          ./build.sh

      # Deploy application
      - name: Deploy application
        run: |
          ./deploy_linux.sh -i -c -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz

      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage

  build-windows:
    name: "Windows CI build"
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Checkout submodules
        run: git submodule update --init --recursive


      - name: Install YASM
        run: choco install yasm -y

      - name: Install NASM
        run: choco install nasm -y

      - name: Install LLVM (clang-cl)
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build application
        run: ./build.ps1
        shell: pwsh
