#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Desktop CI builds (cmake)"
on:
  push:
  pull_request:
  workflow_dispatch:

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  APP_NAME: "ResourceDragon"
  APP_VERSION: "0.0.1"

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  ## GNU/Linux build ###########################################################
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-22.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             sudo apt-get install libgl-dev libxkbcommon-x11-dev libx11-xcb-dev libzstd-dev libxcb1 libxkbcommon0 libxkbcommon-x11-0 libx11-xcb1 libwayland-client0 libwayland-cursor0 libwayland-egl1 libwayland-server0 cmake ninja-build pkgconf libtool libfuse2 appstream -y;

      # Build application
      - name: Build application
        run: |
             cmake --version
             cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G Ninja
             cmake --build build/ --config Release

      # Deploy application
      - name: Deploy application
        run: |
             ./deploy_linux.sh -i -c -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz

      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage

  ## Windows build #############################################################
  # build-windows:
  #   name: "Windows CI build"
  #   runs-on: windows-2022
  #   steps:
  #     # Checkout repository (and submodules)
  #     - name: Checkout repository (and submodules)
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     # Configure MSVC
  #     - name: Configure MSVC
  #       uses: ilammy/msvc-dev-cmd@v1
  #       with:
  #         arch: x86_64

  #     # - name: Install Conan
  #     #   run: |
  #     #       Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
  #     #       scoop install conan

  #     # Build application
  #     - name: Build application
  #       run: |
  #            cmake --version
  #            cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles"
  #            cd build/
  #            nmake

  #     # Deploy application
  #     - name: Deploy application
  #       run: |
  #            sh deploy_windows.sh -c -p

  #     # Upload application ZIP
  #     - name: Upload application ZIP
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip
  #         path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip

  #     # Upload NSIS installer
  #     - name: Upload NSIS installer
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
  #         path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
