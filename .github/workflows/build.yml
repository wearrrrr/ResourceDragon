#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Desktop CI builds (cmake)"
on:
  push:
  pull_request:
  workflow_dispatch:

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  APP_NAME: "ResourceDragon"
  APP_VERSION: "0.0.1"

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  ## GNU/Linux build ###########################################################
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-22.04
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Compute submodule hash
        run: git submodule status --recursive > submodules.txt

      # - name: Restore submodule cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       .git\modules
      #       vendored
      #     key: submodules-${{ hashFiles('submodules.txt') }}
      #     restore-keys: |
      #       submodules-

      - name: Checkout submodules
        run: git submodule update --init --recursive

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             sudo apt-get install libgl-dev libxkbcommon-x11-dev libx11-xcb-dev libzstd-dev libxcb1 libxkbcommon0 libxkbcommon-x11-0 libx11-xcb1 libwayland-client0 libwayland-cursor0 libwayland-egl1 libwayland-server0 cmake ninja-build pkgconf libtool libfuse2 appstream libasound2 libasound2-dev libpulse0 libpulse-dev libpipewire-0.3-0 libpipewire-0.3-dev libaudio2 libaudio-dev -y;

      # Build application
      - name: Build application
        run: |
             cmake --version
             cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G Ninja
             cmake --build build/ --config Release

      # Deploy application
      - name: Deploy application
        run: |
             ./deploy_linux.sh -i -c -p

      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.tar.gz

      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage

  ## Windows build #############################################################
  # build-windows:
  #   name: "Windows CI build"
  #   runs-on: windows-2022
  #   steps:
  #     - name: Clone repo
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: false
  #         fetch-depth: 0

  #     - name: Compute submodule hash
  #       run: git submodule status --recursive > submodules.txt

  #     - name: Restore submodule cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           .git/modules
  #           vendored
  #         key: submodules-${{ hashFiles('submodules.txt') }}
  #         restore-keys: |
  #           submodules-
  #         enableCrossOsArchive: true

  #     - name: Checkout submodules
  #       run: git submodule update --init --recursive

  #     - name: Setup MSVC environment (for nmake and headers/libs)
  #       uses: ilammy/msvc-dev-cmd@v1

  #     - name: Install LLVM
  #       uses: egor-tensin/setup-clang@v1
  #       with:
  #         version: latest
  #         platform: x64

  #     - name: Add LLVM to PATH
  #       run: echo "$env:ProgramFiles\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

  #     - name: Build application
  #       run: |
  #            cmake --version
  #            cmake -B build/ -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
  #            cd build/
  #            nmake

  #     # # Deploy application
  #     # - name: Deploy application
  #     #   run: |
  #     #        sh deploy_windows.sh -c -p

  #     # # Upload application ZIP
  #     # - name: Upload application ZIP
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip
  #     #     path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip

  #     # Upload NSIS installer
  #     - name: Upload NSIS installer
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
  #         path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
